(1) cd C:/Users/Dell/IdeaProjects/pos

 in linux: cd /media/nishi/Software\ \&\ Study/IdeaProjects/pos

 (2) mvn spring-boot:run

 http://localhost:8080/users
 http://localhost/phpmyadmin

 (3) open postman.
 POST: localhost:8080/login
 in Body:
 username : nishi.ict@gmail.com
 password : 1234

 POST : localhost:8080/users
 Body -> form-data select

 (4) In Linux, if :
The Tomcat connector configured to listen on port 8080 failed to start.
The port may already be in use or the connector may be misconfigured.
---this happens then how to stop the port?




$2a$10$UnbiyyN18Bv2WCggE9aTpu.q5GUobZX.kTL2MErk6lYkw7JHFN/7a


wrapper = nullable
primitive = not nullable


# ===============================
# = DATA SOURCE
# ===============================
spring.datasource.url=jdbc:mysql://localhost:3306/pos
spring.datasource.username=root
spring.datasource.password=nishi

spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1


spring.datasource.tomcat.max-wait=20000
spring.datasource.tomcat.max-active=50
spring.datasource.tomcat.max-idle=20
spring.datasource.tomcat.min-idle=15


# ===============================
# = JPA / HIBERNATE
# ===============================
spring.jpa.show-sql = true
spring.jpa.hibernate.ddl-auto = update
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect



# ===============================
# = Thymeleaf configurations
# ===============================
spring.thymeleaf.mode=LEGACYHTML5
spring.thymeleaf.cache=false


# ==============================================================
# = Spring Security / Queries for AuthenticationManagerBuilder
# ==============================================================
spring.queries.users-query=select email, password, active from user where email=?
spring.queries.roles-query=select u.email, r.role from user u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=?



--------------------------------------------------------------------------------------------------------------------------------

spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://localhost:3306/pos
spring.datasource.username=root
spring.datasource.password=nishi


spring.datasource.tomcat.max-wait=20000
spring.datasource.tomcat.max-active=50
spring.datasource.tomcat.max-idle=20
spring.datasource.tomcat.min-idle=15

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.id.new_generator_mappings = false
spring.jpa.properties.hibernate.format_sql = true

logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
---------------------------------------------------------------------

form:

    @ResponseStatus(value = HttpStatus.CREATED)
    @RequestMapping(path = "/addProduct", method = RequestMethod.POST)
    public ModelAndView createProduct(@Valid Product product) {

        ModelAndView modelAndView = new ModelAndView();

        productService.createProduct(product);
        modelAndView.addObject("successMessage", "Product has been registered successfully");

        modelAndView.addObject("product", new Product());
        modelAndView.setViewName("product");

        return modelAndView;
    }


    @RequestMapping(path = "/updateProduct", method = RequestMethod.POST)
    public ModelAndView updateProduct(Long id) {

        ModelAndView modelAndView = new ModelAndView("product.html");
        Product product = productService.getProduct(id);
        product.setId(id);
        productService.updateProduct(product);

        modelAndView.addObject("product", product);
        modelAndView.setViewName("product");

        return modelAndView;
    }